{"abi":[{"type":"function","name":"fulfilDecryptionRequest","inputs":[{"name":"requestID","type":"uint256","internalType":"uint256"},{"name":"decryptionKey","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getPublicKey","inputs":[],"outputs":[{"name":"","type":"uint256[2]","internalType":"uint256[2]"},{"name":"","type":"uint256[2]","internalType":"uint256[2]"}],"stateMutability":"view"},{"type":"function","name":"getPublicKeyBytes","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getRequestInFlight","inputs":[{"name":"requestId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct TypesLib.DecryptionRequest","components":[{"name":"schemeID","type":"string","internalType":"string"},{"name":"ciphertext","type":"bytes","internalType":"bytes"},{"name":"condition","type":"bytes","internalType":"bytes"},{"name":"decryptionKey","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"callback","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"isInFlight","inputs":[{"name":"requestID","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"registerCiphertext","inputs":[{"name":"schemeID","type":"string","internalType":"string"},{"name":"ciphertext","type":"bytes","internalType":"bytes"},{"name":"conditions","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"requestID","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"setSignatureSchemeAddressProvider","inputs":[{"name":"newSignatureSchemeAddressProvider","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"fulfilDecryptionRequest(uint256,bytes,bytes)":"bd132697","getPublicKey()":"2e334452","getPublicKeyBytes()":"acae9fee","getRequestInFlight(uint256)":"44880e1e","isInFlight(uint256)":"cd802c91","registerCiphertext(string,bytes,bytes)":"f87f0e61","setSignatureSchemeAddressProvider(address)":"16cc9a98","version()":"54fd4d50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"decryptionKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfilDecryptionRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicKeyBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestInFlight\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"schemeID\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"condition\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptionKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"}],\"internalType\":\"struct TypesLib.DecryptionRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"isInFlight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schemeID\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"}],\"name\":\"registerCiphertext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSignatureSchemeAddressProvider\",\"type\":\"address\"}],\"name\":\"setSignatureSchemeAddressProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fulfilDecryptionRequest(uint256,bytes,bytes)\":{\"details\":\"This function is intended to be called after a decryption key has been generated off-chain.\",\"params\":{\"decryptionKey\":\"The decrypted content in bytes format. The data should represent the original                      message in its decrypted form.\",\"requestID\":\"The unique identifier for the encryption request. This should match the ID used                  when the encryption was initially requested.\",\"signature\":\"The signature associated with the request, provided as a byte array\"}},\"getPublicKey()\":{\"details\":\"Returns the public key as two elliptic curve points.\",\"returns\":{\"_0\":\"Two pairs of coordinates representing the public key points on the elliptic curve.\"}},\"getPublicKeyBytes()\":{\"details\":\"Returns the public key as bytes.\",\"returns\":{\"_0\":\"Bytes string representing the public key points on the elliptic curve.\"}},\"getRequestInFlight(uint256)\":{\"details\":\"This function returns the Request struct associated with the given requestId.\",\"params\":{\"requestId\":\"The ID of the request to retrieve.\"},\"returns\":{\"_0\":\"The Request struct corresponding to the given requestId.\"}},\"isInFlight(uint256)\":{\"params\":{\"requestID\":\"The ID of the request to check.\"},\"returns\":{\"_0\":\"boolean indicating whether the request is in flight or not.\"}},\"registerCiphertext(string,bytes,bytes)\":{\"details\":\"The creation of `Ciphertext` and `conditions` bytes will be managed by the JavaScript client library\",\"params\":{\"ciphertext\":\"The encrypted data to be registered\",\"conditions\":\"The conditions that need to be met to decrypt the ciphertext\"},\"returns\":{\"requestID\":\"The unique ID assigned to the registered decryption request\"}},\"setSignatureSchemeAddressProvider(address)\":{\"params\":{\"newSignatureSchemeAddressProvider\":\"The signature address provider address to set\"}},\"version()\":{\"details\":\"Returns the version number of the upgradeable contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fulfilDecryptionRequest(uint256,bytes,bytes)\":{\"notice\":\"Provide the decryption key for a specific requestID alongside a signature.\"},\"getPublicKey()\":{\"notice\":\"Retrieves the public key associated with the decryption process.\"},\"getPublicKeyBytes()\":{\"notice\":\"Retrieves the public key associated with the decryption process.\"},\"getRequestInFlight(uint256)\":{\"notice\":\"Retrieves a specific request by its ID.\"},\"isInFlight(uint256)\":{\"notice\":\"Verifies whether a specific request is in flight or not.\"},\"registerCiphertext(string,bytes,bytes)\":{\"notice\":\"Registers a Ciphertext and associated conditions for decryptioncreation of the `Ciphertext` and `conditions` bytes will be managed by a javascript client library off-chain\"},\"setSignatureSchemeAddressProvider(address)\":{\"notice\":\"Updates the signature scheme address provider contract address\"}},\"notice\":\"Smart contract that stores and conditionally decrypts encrypted messages / data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IDecryptionSender.sol\":\"IDecryptionSender\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@ds-test/=lib/forge-std/lib/ds-test/src/\",\":@forge-std/=lib/forge-std/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":config/=config/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/interfaces/IDecryptionSender.sol\":{\"keccak256\":\"0xbd34de237878d87b0cbf8f495874e1d6b57796098b153cc280a4767205828861\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://25975e425be195b7e64a4686e12a1dfc09dcda91aa481de03d6fb1739630bad1\",\"dweb:/ipfs/QmdJuocCC4EQr8BdkwRdkqpHpTGwFRdxo7sNqdYDJHmmXS\"]},\"src/libraries/BLS.sol\":{\"keccak256\":\"0x2da1804b02071947b31a69bdd567291638316b320368fc29bc0b13be9a129578\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://362d0c8f87d1ea62408266c30bbaa7a467deaee057846277b3d449f527545e1f\",\"dweb:/ipfs/QmToy3p41CJVxBWQEdmJFpCkb3cXWhTgwhJRWrid9wCVaz\"]},\"src/libraries/ModExp.sol\":{\"keccak256\":\"0x40964e060f2e7229e66dc1698e11503ff1e3ab94106971192f4f1c49622b2feb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://05d1962cbeb754479575daa623c8d27669f31248d0b1a1e2c13dcc91c088837e\",\"dweb:/ipfs/QmZVbLHadGSW8Gk7MBbVP8EysyGFEb1Unfbv3kjsWHv1us\"]},\"src/libraries/TypesLib.sol\":{\"keccak256\":\"0x664b06d806fcbecf80103c38525ab9439a500f138d2d4203aa782dbedc97ef6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1fb6ddd97065602a90d00b22b377e1264288c367852d62abd33692d048dd6bf\",\"dweb:/ipfs/QmP9uhCswmee8Pajnmw1dcoWGWWafw8vpxqybrnRsbp3vq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"requestID","type":"uint256"},{"internalType":"bytes","name":"decryptionKey","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"fulfilDecryptionRequest"},{"inputs":[],"stateMutability":"view","type":"function","name":"getPublicKey","outputs":[{"internalType":"uint256[2]","name":"","type":"uint256[2]"},{"internalType":"uint256[2]","name":"","type":"uint256[2]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPublicKeyBytes","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getRequestInFlight","outputs":[{"internalType":"struct TypesLib.DecryptionRequest","name":"","type":"tuple","components":[{"internalType":"string","name":"schemeID","type":"string"},{"internalType":"bytes","name":"ciphertext","type":"bytes"},{"internalType":"bytes","name":"condition","type":"bytes"},{"internalType":"bytes","name":"decryptionKey","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"address","name":"callback","type":"address"}]}]},{"inputs":[{"internalType":"uint256","name":"requestID","type":"uint256"}],"stateMutability":"view","type":"function","name":"isInFlight","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"string","name":"schemeID","type":"string"},{"internalType":"bytes","name":"ciphertext","type":"bytes"},{"internalType":"bytes","name":"conditions","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"registerCiphertext","outputs":[{"internalType":"uint256","name":"requestID","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"newSignatureSchemeAddressProvider","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setSignatureSchemeAddressProvider"},{"inputs":[],"stateMutability":"pure","type":"function","name":"version","outputs":[{"internalType":"string","name":"","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"fulfilDecryptionRequest(uint256,bytes,bytes)":{"details":"This function is intended to be called after a decryption key has been generated off-chain.","params":{"decryptionKey":"The decrypted content in bytes format. The data should represent the original                      message in its decrypted form.","requestID":"The unique identifier for the encryption request. This should match the ID used                  when the encryption was initially requested.","signature":"The signature associated with the request, provided as a byte array"}},"getPublicKey()":{"details":"Returns the public key as two elliptic curve points.","returns":{"_0":"Two pairs of coordinates representing the public key points on the elliptic curve."}},"getPublicKeyBytes()":{"details":"Returns the public key as bytes.","returns":{"_0":"Bytes string representing the public key points on the elliptic curve."}},"getRequestInFlight(uint256)":{"details":"This function returns the Request struct associated with the given requestId.","params":{"requestId":"The ID of the request to retrieve."},"returns":{"_0":"The Request struct corresponding to the given requestId."}},"isInFlight(uint256)":{"params":{"requestID":"The ID of the request to check."},"returns":{"_0":"boolean indicating whether the request is in flight or not."}},"registerCiphertext(string,bytes,bytes)":{"details":"The creation of `Ciphertext` and `conditions` bytes will be managed by the JavaScript client library","params":{"ciphertext":"The encrypted data to be registered","conditions":"The conditions that need to be met to decrypt the ciphertext"},"returns":{"requestID":"The unique ID assigned to the registered decryption request"}},"setSignatureSchemeAddressProvider(address)":{"params":{"newSignatureSchemeAddressProvider":"The signature address provider address to set"}},"version()":{"details":"Returns the version number of the upgradeable contract."}},"version":1},"userdoc":{"kind":"user","methods":{"fulfilDecryptionRequest(uint256,bytes,bytes)":{"notice":"Provide the decryption key for a specific requestID alongside a signature."},"getPublicKey()":{"notice":"Retrieves the public key associated with the decryption process."},"getPublicKeyBytes()":{"notice":"Retrieves the public key associated with the decryption process."},"getRequestInFlight(uint256)":{"notice":"Retrieves a specific request by its ID."},"isInFlight(uint256)":{"notice":"Verifies whether a specific request is in flight or not."},"registerCiphertext(string,bytes,bytes)":{"notice":"Registers a Ciphertext and associated conditions for decryptioncreation of the `Ciphertext` and `conditions` bytes will be managed by a javascript client library off-chain"},"setSignatureSchemeAddressProvider(address)":{"notice":"Updates the signature scheme address provider contract address"}},"version":1}},"settings":{"remappings":["@ds-test/=lib/forge-std/lib/ds-test/src/","@forge-std/=lib/forge-std/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","config/=config/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IDecryptionSender.sol":"IDecryptionSender"},"evmVersion":"cancun","libraries":{}},"sources":{"src/interfaces/IDecryptionSender.sol":{"keccak256":"0xbd34de237878d87b0cbf8f495874e1d6b57796098b153cc280a4767205828861","urls":["bzz-raw://25975e425be195b7e64a4686e12a1dfc09dcda91aa481de03d6fb1739630bad1","dweb:/ipfs/QmdJuocCC4EQr8BdkwRdkqpHpTGwFRdxo7sNqdYDJHmmXS"],"license":"MIT"},"src/libraries/BLS.sol":{"keccak256":"0x2da1804b02071947b31a69bdd567291638316b320368fc29bc0b13be9a129578","urls":["bzz-raw://362d0c8f87d1ea62408266c30bbaa7a467deaee057846277b3d449f527545e1f","dweb:/ipfs/QmToy3p41CJVxBWQEdmJFpCkb3cXWhTgwhJRWrid9wCVaz"],"license":"MIT"},"src/libraries/ModExp.sol":{"keccak256":"0x40964e060f2e7229e66dc1698e11503ff1e3ab94106971192f4f1c49622b2feb","urls":["bzz-raw://05d1962cbeb754479575daa623c8d27669f31248d0b1a1e2c13dcc91c088837e","dweb:/ipfs/QmZVbLHadGSW8Gk7MBbVP8EysyGFEb1Unfbv3kjsWHv1us"],"license":"MIT"},"src/libraries/TypesLib.sol":{"keccak256":"0x664b06d806fcbecf80103c38525ab9439a500f138d2d4203aa782dbedc97ef6a","urls":["bzz-raw://d1fb6ddd97065602a90d00b22b377e1264288c367852d62abd33692d048dd6bf","dweb:/ipfs/QmP9uhCswmee8Pajnmw1dcoWGWWafw8vpxqybrnRsbp3vq"],"license":"MIT"}},"version":1},"id":56}